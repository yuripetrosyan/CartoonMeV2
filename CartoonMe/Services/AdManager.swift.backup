import Foundation
import SwiftUI
import UIKit

// MARK: - Test Ad Manager (Google AdMob Integration)
class AdManager: NSObject, ObservableObject {
    static let shared = AdManager()
    
    @Published var isAdLoaded = false
    @Published var isShowingAd = false
    @Published var adEarnings: Double = 0.0
    
    // Test Mode - Set to true for testing without real ads
    private let testMode = true
    
    // AdMob App ID (You'll need to replace this with your actual App ID)
    private let appID = "ca-app-pub-3940256099942544~1458002511" // Test App ID
    
    // Ad Unit IDs (Test IDs - replace with real ones later)
    private let bannerAdUnitID = "ca-app-pub-3940256099942544/2934735716"
    private let interstitialAdUnitID = "ca-app-pub-3940256099942544/4411468910"
    private let rewardedAdUnitID = "ca-app-pub-3940256099942544/1712485313"
    
    override init() {
        super.init()
        initializeAdMob()
    }
    
    private func initializeAdMob() {
        if testMode {
            print("ðŸ§ª AdManager: Test mode - simulating ad initialization")
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self.isAdLoaded = true
            }
        } else {
            // TODO: Add real AdMob initialization
            // GADMobileAds.sharedInstance().start(completionHandler: nil)
        }
    }
    
    // MARK: - Banner Ad Methods
    func loadBannerAd() {
        if testMode {
            print("ðŸ§ª Loading test banner ad...")
            isAdLoaded = true
        } else {
            // TODO: Load real banner ad
        }
    }
    
    // MARK: - Interstitial Ad Methods
    func loadInterstitialAd() {
        if testMode {
            print("ðŸ§ª Loading test interstitial ad...")
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self.isAdLoaded = true
            }
        } else {
            // TODO: Load real interstitial ad
        }
    }
    
    func showInterstitialAd() {
        if testMode {
            print("ðŸ§ª Showing test interstitial ad...")
            isShowingAd = true
            simulateAdRevenue(amount: 0.15) // Simulate $0.15 revenue
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                self.isShowingAd = false
                self.isAdLoaded = false
                self.loadInterstitialAd() // Load next ad
            }
        } else {
            // TODO: Show real interstitial ad
        }
    }
    
    // MARK: - Rewarded Video Ad Methods
    func loadRewardedAd() {
        if testMode {
            print("ðŸ§ª Loading test rewarded ad...")
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self.isAdLoaded = true
            }
        } else {
            // TODO: Load real rewarded ad
        }
    }
    
    func showRewardedAd(completion: @escaping (Bool) -> Void) {
        if testMode {
            print("ðŸ§ª Showing test rewarded ad...")
            isShowingAd = true
            simulateAdRevenue(amount: 0.25) // Simulate $0.25 revenue
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                self.isShowingAd = false
                self.isAdLoaded = false
                completion(true) // User watched full ad
                self.loadRewardedAd() // Load next ad
            }
        } else {
            // TODO: Show real rewarded ad
        }
    }
    
    // MARK: - Helper Methods
    func simulateAdRevenue(amount: Double) {
        adEarnings += amount
        print("ðŸ’° Ad revenue: +$\(String(format: "%.2f", amount)) (Total: $\(String(format: "%.2f", adEarnings)))")
    }
    
    func resetEarnings() {
        adEarnings = 0.0
    }
}

// MARK: - Test Banner Ad View
struct TestBannerAdView: View {
    @StateObject private var adManager = AdManager.shared
    let height: CGFloat = 60
    
    var body: some View {
        ZStack {
            Rectangle()
                .fill(
                    LinearGradient(
                        colors: [.blue.opacity(0.1), .purple.opacity(0.1)],
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .overlay(
                    RoundedRectangle(cornerRadius: 8)
                        .stroke(.white.opacity(0.2), lineWidth: 1)
                )
            
            VStack(spacing: 4) {
                Text("ðŸ§ª TEST AD")
                    .font(.caption2)
                    .foregroundColor(.white.opacity(0.7))
                
                Text("Banner Advertisement")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(.white)
                
                Text("Tap to simulate revenue")
                    .font(.caption2)
                    .foregroundColor(.white.opacity(0.6))
            }
        }
        .frame(height: height)
        .cornerRadius(8)
        .onTapGesture {
            adManager.simulateAdRevenue(amount: 0.05)
        }
        .onAppear {
            adManager.loadBannerAd()
        }
    }
}

// MARK: - Test Interstitial Ad Overlay
struct TestInterstitialAdView: View {
    @Binding var isShowing: Bool
    let onDismiss: () -> Void
    
    var body: some View {
        if isShowing {
            ZStack {
                Color.black.opacity(0.9)
                    .ignoresSafeArea()
                
                VStack(spacing: 20) {
                    Text("ðŸ§ª TEST INTERSTITIAL AD")
                        .font(.caption)
                        .foregroundColor(.white.opacity(0.7))
                    
                    VStack(spacing: 12) {
                        Text("Full Screen Advertisement")
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                        
                        Text("This would be a real ad\nEarning you ~$0.15")
                            .font(.body)
                            .foregroundColor(.white.opacity(0.8))
                            .multilineTextAlignment(.center)
                        
                        Text("Ad will close automatically in 3 seconds")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.6))
                    }
                    
                    Button("Close Ad") {
                        onDismiss()
                    }
                    .padding(.horizontal, 24)
                    .padding(.vertical, 12)
                    .background(.white.opacity(0.2))
                    .foregroundColor(.white)
                    .cornerRadius(25)
                }
                .padding(40)
            }
            .transition(.opacity)
        }
    }
} 